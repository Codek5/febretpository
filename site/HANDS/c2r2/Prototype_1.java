import processing.core.*; 
import processing.xml.*; 

import java.applet.*; 
import java.awt.Dimension; 
import java.awt.Frame; 
import java.awt.event.MouseEvent; 
import java.awt.event.KeyEvent; 
import java.awt.event.FocusEvent; 
import java.awt.Image; 
import java.io.*; 
import java.net.*; 
import java.text.*; 
import java.util.*; 
import java.util.zip.*; 
import java.util.regex.*; 

public class Prototype_1 extends PApplet {

//import controlP5.*;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Global constants
static int SCREEN_WIDTH = 1400;
static int SCREEN_HEIGHT = 900;

static int POPUP_WIDTH = 400;

static String VERSION = "c2r2";	

static int STYLE_DELETED_ROW_BACK_COLOR = 0xff888888;	

// Variables used to keep track of the prototype state
public boolean OPTION_NO_SUGGESTIONS = false;
public boolean OPTION_LONG_ALERT_BUTTON = true;
public boolean OPTION_EXPANDABLE_POPUP_TEXT = false;
public boolean OPTION_ALERT_INFO_BUTTON = false;
public boolean OPTION_ENABLE_POPUP_TEXT = true;
public boolean OPTION_ENABLE_ACTION_INFO_POPUP = false;
public boolean OPTION_TOOLTIP_AUTO_OPEN = false;
public boolean OPTION_GRAPH_IN_MAIN_POPUP = false;
public boolean OPTION_GRAPH_ALERT_BUTTON = false;
public int OPTION_NNN_ICON_STYLE = 1;
public int OPTION_NUMBER = 1;
public int CYCLE2_OPTION_NUMBER = 1;

// NNN definition images
public PImage IMG_IMP_GAS_EXC = null; 
public PImage IMG_ACUTE_PAIN = null;
public PImage IMG_DEATH_ANXIETY = null;
public PImage IMG_COMFORTABLE_DEATH = null;
public PImage IMG_CONSULTATION = null;
public PImage IMG_COPING = null;
public PImage IMG_ENERGY_CONSERVATION = null;
public PImage IMG_ENVIRONMENTAL_MANAGEMENT = null;
public PImage IMG_FAMILY_COPING = null;
public PImage IMG_FAMILY_INTEGRITY_PROMOTION = null;
public PImage IMG_FAMILY_SUPPORT = null;
public PImage IMG_FAMILY_THERAPY = null;
public PImage IMG_GRIEVING = null;
public PImage IMG_GUIDED_IMAGERY = null;
public PImage IMG_HEALTH_EDUCATION = null;
public PImage IMG_IMPAIRED_GAS_EXCHANGE = null;
public PImage IMG_INTERRUPTED_FAMILY_PROCESS = null;
public PImage IMG_MASSAGE = null;
public PImage IMG_PATIENT_CONTROLLED_ANALGESIA = null;
public PImage IMG_POSITIONING = null;

public PImage IMG_MUSIC_THERAPY = null;
public PImage IMG_CALMING_TECHNIQUE = null;
public PImage IMG_SPIRITUAL_SUPPORT = null;
public PImage IMG_MEDICATION_MANAGEMENT = null;
public PImage IMG_PAIN_MANAGEMENT = null;
public PImage IMG_ANXIETY_LEVEL = null;
public PImage IMG_PAIN_LEVEL = null;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Message library
// Other text strings.
String DEF_ACUTE_PAIN = 
	"<b> Acute Pain: </b> \n " +
	"Unpleasant sensory and emotional experience arising from actual or potential tissue damage or described in terms of such damage (International Association for the Study of Pain); sudden or slow onset of any intensity from mild to severe with an anticipated or predictable end and a duration of less than 6 months";
String DEF_IMPAIRED_GAS_EXCHANGE =
	"<b> Impaired Gas Exchange: </b> \n " +
	"Excess or deficit in oxygenation and/or carbon dioxide elimination at the alveolar-capillary membrane";
String DEF_DEATH_ANXIETY =
	"<b> Death Anxiety: </b> \n " +
	"Vague uneasy feeling of discomfort or dread generated by perceptions of a real or imagined threat to one?s existence";
String DEF_ENERGY_CONSERVATION =
	"<b> Energy Conservation: </b> \n " +
	"Personal actions to manage energy for initiating and sustaining activity";
String DEF_COPING =
	"<b> Coping: </b> \n " +
	"Personal actions to manage stressors that tax an individuals resources";
String DEF_PATIENT_CONTROLLED_ANALGESIA =
	"<b> Patient Controlled Analgesia: </b> \n " +
	"Facilitating patient control of analgesic administration and regulation";
String DEF_POSITIONING =
	"<b> Positioning: </b> \n " +
	"Deliberative placement of the patient or a body part to promote physiological and-or psychological well-being";
String DEF_MASSAGE =
	"<b> Massage: </b> \n " +
	"Stimulation of the skin and underlying tissues with varying degrees of hand pressure to decrease pain, produce relaxation, and/or improve circulation";
String DEF_RELAXATION_THERAPY =
	"<b> Relaxation Therapy: </b> \n " +
	"Missing definition";
String DEF_GUIDED_IMAGERY =
	"<b> Guided Imagery: </b> \n " +
	"Purposeful use of imagination to achieve a particular state, outcome, or action or to direct attention away from undesirable sensations";

// Pain evidence message for popup screen.
String MSG_PAIN_EVIDENCE_POPUP = 			
	"Evidence Suggests That: <l> \n " +
	"- A combination of Medication Management, Positioning and Pain Management has the most positive impact on Pain Level. " + 
		"<*> <b> Add NIC Positioning. </b> <s1> \n " +
	"- It is more difficult to control pain when EOL patient has both Pain and Impaired Gas Exchange as problems. " + 
		"<*> <b> Prioritize pain and/or eliminate impaired gas exchange. </b> \n " +
	"- More than 50% of EOL patients do not achieve expected NOC Pain Level by discharge or death. " + 
		"<*> <b> Additional actions needed. </b> \n ";

// Message for info button next to pain graph
String MSG_PAIN_GRAPH_DESCRIPTION = "Graph shows actual Pain NOC levels during first 24hr and projected levels to 72 hours if current actions are continued.";

// Cycle 2: add family coping message on aciton bar
String MSG_ACTION_COPING = "Add <nanda> Interrupted Family Process mini POC";	

// Cycle 2: add consultation message on aciton bar
String MSG_ACTION_CONSULTATION = "Add <nic> consultation";

// Cycle 2: NIC Consultation POC text
String NIC_CONSULTATION_TEXT = "Consultation: palliative care";

///////////////////////////////////////////////////////////////////////////////////////////////////
// Globl variables
public int prototypeState = 0;

public GradientUtils gu = new GradientUtils();

// Variables used got holding the different views
public View mainView;     // The Main View is the background of the window with all of the other widgets on top of it.

public TitleView titleView;
public PatientDataView nameView,dobView,genderView,allergiesView,codeStatusView,pocView,shftView,roomView,medicalDXView,mrView,physicianView,otherView;

public View popUpView;
public Tooltip tooltipView = null;
public TextBox activeTextBox = null;

boolean filterKeyInput = false;

POCManager pocManager;

// Variables used for Font Control
public PFont font,fbold; 

// Variables used for colours
public int backgroundColor = 255;
public int titleBackgroundColor = 0xff6495ED;
public int titleColor = 0xffFF8C00 ;
public int subtitleColor = 255;
public int colouredRowColor = 0xffC6E2FF;
public int secondLevelRowColor = 255;
public int thirdLevelRowColor = 255;
public int closePopUpColor = 0xff5E5E5E;
public int rationaleBarColor = 0xffD4D4D4;
public int rationaleColor = 0;
public int buttonSelectedColor = 200;
public int buttonNotColor = 0xff4682B4;
public int popUpSectionColor = 0xffFFF68F;
public int alertHighColor = 0xffFF3333;
public int alertMidColor = 0xffFCF112;
public int alertLowColor = 0xffAAFF50;
public int tooltipColor = 0xffFFFFFF;

// Variables holding Image names
public String handIconString = "Red_Handprint__right_orange.png";
public String plusIconString = "add.png";
public String minusIconString = "delete.png";

// Variables holding Images
public PImage handIcon,firstLevelIcon,secondLevelIcon,thirdLevelIcon;
public PImage firstLevelIconLegend, secondLevelIconLegend,thirdLevelIconLegend;
public PImage plusIcon, minusIcon, prioritizeIcon, starIcon, checkIcon, crossIcon;
public PImage infoIcon;

public PImage emptySmallGraph;
public PImage smallGraph1;
public PImage smallGraph2;
public PImage smallGraph3;

public PImage anxietyLevelTrend;
public PImage anxietySelfControlTrend;
public PImage painLevelTrend;
public PImage emptyTrend;

// Variables holding data of currently showing patient
public String name = "Ann Taylor";
public String dob = "03/12/1959",gender = "Female", allergies = "None" ,codeStatus = "DNR" ,poc = "09/17/2010", shft= "7:00a - 3:00p", room = "1240", medicalDX = "Malignant Neoplasm of the Pancreas" , mr = "xxx xxx xxx", physician = "Piper";
public String other = "Husband to be called ANYTIME \n at patient's request \n 776-894-1010";

///////////////////////////////////////////////////////////////////////////////////////////////////
public void setup()
{
	size(SCREEN_WIDTH, SCREEN_HEIGHT);
	frameRate(20);
	smooth();

	//Load fonts.
	//font = loadFont("SegoeUI-14.vlw");
	font = createFont("Verdana", 12);
	//fbold = loadFont("SegoeUI-Bold-14.vlw");
	fbold = createFont("Verdana Bold", 12);
	textFont(font);

	// Load image assets.
	handIcon = loadImage(handIconString);
	handIcon.resize(0,25);

	plusIcon = loadImage(plusIconString);
	plusIcon.resize(0,15);
 
	minusIcon = loadImage(minusIconString);
	minusIcon.resize(0,15);

	prioritizeIcon = loadImage("arrow_up.png");
	prioritizeIcon.resize(0,15);
	
	infoIcon = loadImage("information.png");
	infoIcon.resize(0, 22);
	emptySmallGraph = loadImage("emptySmallGraph.png");
	smallGraph1 = loadImage("SmallGraph1.png");
	smallGraph2 = loadImage("SmallGraph2.png");
	smallGraph3 = loadImage("SmallGraph3.png");
	smallGraph1.resize(0, 15);
	smallGraph2.resize(0, 15);
	smallGraph3.resize(0, 15);
	emptySmallGraph.resize(0, 15);
	
	starIcon = loadImage("star.png");
	checkIcon = loadImage("accept.png");
	checkIcon.resize(0, 22);
	crossIcon = loadImage("cross.png");
	crossIcon.resize(0, 22);
	
	IMG_IMP_GAS_EXC = loadImage("impairedgasExchange.png");
	IMG_ACUTE_PAIN = loadImage("acutePain.png");
	IMG_DEATH_ANXIETY = loadImage("deathAnxiety.png");
	IMG_INTERRUPTED_FAMILY_PROCESS = loadImage("interruptedFamilyProcess.PNG");
	
	IMG_FAMILY_INTEGRITY_PROMOTION = loadImage("familyIntegrityPromotion.PNG");
	IMG_COMFORTABLE_DEATH = loadImage("comfortableDeath.PNG");
	IMG_CONSULTATION =  loadImage("consultation.PNG");
	IMG_COPING =  loadImage("coping.PNG");
	IMG_ENERGY_CONSERVATION =  loadImage("energyConservation.PNG");
	IMG_ENVIRONMENTAL_MANAGEMENT =  loadImage("environmentalManagement.PNG");
	IMG_FAMILY_COPING =  loadImage("familyCoping.PNG");
	IMG_FAMILY_INTEGRITY_PROMOTION =  loadImage("familyIntegrityPromotion.PNG");
	IMG_FAMILY_SUPPORT =  loadImage("familySupport.PNG");
	IMG_FAMILY_THERAPY =  loadImage("familyTherapy.PNG");
	IMG_GRIEVING =  loadImage("grieving.PNG");
	IMG_GUIDED_IMAGERY =  loadImage("guidedImagery.PNG");
	IMG_HEALTH_EDUCATION =  loadImage("healthEducation.PNG");
	IMG_MASSAGE =  loadImage("massage.PNG");
	IMG_PATIENT_CONTROLLED_ANALGESIA =  loadImage("patientControlledAnalgesia.PNG");
	IMG_POSITIONING =  loadImage("positioning.png");
	
	IMG_MUSIC_THERAPY = loadImage("musicTherapy.PNG");
	IMG_CALMING_TECHNIQUE = loadImage("calmingTechnique.PNG");
	IMG_SPIRITUAL_SUPPORT = loadImage("spiritualSupport.PNG");
	IMG_MEDICATION_MANAGEMENT = loadImage("medicationManagement.PNG");
	IMG_PAIN_MANAGEMENT = loadImage("painManagement.PNG");
	IMG_ANXIETY_LEVEL = loadImage("anxietyLevel.PNG");
	IMG_PAIN_LEVEL = loadImage("painLevel.PNG");
	reset();
}

///////////////////////////////////////////////////////////////////////////////////////////////////
public void loadNNNIcons()
{
	if(OPTION_NNN_ICON_STYLE == 0)
	{
		firstLevelIcon = loadImage("black_square.png");
		secondLevelIcon  = loadImage("black_circle.png");
		thirdLevelIcon = loadImage("black_triangle.png");

		firstLevelIconLegend = loadImage("black_square.png");
		secondLevelIconLegend  = loadImage("black_circle.png");
		thirdLevelIconLegend = loadImage("black_triangle.png");
		firstLevelIconLegend.resize(0,25);
		secondLevelIconLegend.resize(0,25);
		thirdLevelIconLegend.resize(0,25);
	}
	else if(OPTION_NNN_ICON_STYLE == 1)
	{
		firstLevelIcon = loadImage("NANDA.png");
		secondLevelIcon  = loadImage("NOC.png");
		thirdLevelIcon = loadImage("NIC.png");

		firstLevelIconLegend = loadImage("NANDA.png");
		secondLevelIconLegend  = loadImage("NOC.png");
		thirdLevelIconLegend = loadImage("NIC.png");
		firstLevelIconLegend.resize(0,25);
		secondLevelIconLegend.resize(0,25);
		thirdLevelIconLegend.resize(0,25);
	}
	
	anxietyLevelTrend = loadImage("anxietyLevelTrend.png");
	anxietyLevelTrend.resize(500, 0);
	anxietySelfControlTrend = loadImage("anxietySelfControlTrend2.png");
	anxietySelfControlTrend.resize(500, 0);
	painLevelTrend = loadImage("painLevelTrend.png");
	painLevelTrend.resize(500, 0);
	emptyTrend = loadImage("emptyTrend.png");
	emptyTrend.resize(500, 0);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
public void reset()
{
	popUpView = null;
	
	loadNNNIcons();
	
	// Views created
	mainView = new View(0, 0, width, height);

	titleView = new TitleView(0,0,width,handIcon,"HANDS","- Hands-On Automated Nursing Data System",titleBackgroundColor, titleColor,subtitleColor);
	mainView.subviews.add(titleView); 

	setupPatientInfoView();
	setupPOCView();
	
	if(!OPTION_NO_SUGGESTIONS) setupPopup();
}

///////////////////////////////////////////////////////////////////////////////////////////////////
public void setupPatientInfoView()
{
	float cx = width - 390;
	float cy = titleView.h + 25;
	float cw = 200;
	float ch = 20;
	
	nameView = new PatientDataView(cx, cy, cw, ch, "Patient Name:", name);
	mainView.subviews.add(nameView);
	cy += 25;

	dobView = new PatientDataView(cx, cy, cw, ch, "DOB:",dob);
	mainView.subviews.add(dobView);
	cy += 25;

	genderView = new PatientDataView(cx, cy, cw, ch, "Gender:",gender);
	mainView.subviews.add(genderView);
	cy += 25;

	allergiesView = new PatientDataView(cx, cy, cw, ch, "Allergies:",allergies);
	mainView.subviews.add(allergiesView);
	cy += 25;

	codeStatusView = new PatientDataView(cx, cy, cw, ch, "Code Status:",codeStatus);
	mainView.subviews.add(codeStatusView);
	cy += 25;

	pocView = new PatientDataView(cx, cy, cw, ch, "POC Date:",poc);
	mainView.subviews.add(pocView);
	cy += 25;

	shftView = new PatientDataView(cx, cy, cw, ch, "Shift:",shft);
	mainView.subviews.add(shftView);
	cy += 25;

	roomView = new PatientDataView(cx, cy, cw, ch, "Room#:",room);
	mainView.subviews.add(roomView);
	cy += 25;

	medicalDXView = new PatientDataView(cx, cy, cw, ch, "Medical DX:",medicalDX);
	mainView.subviews.add(medicalDXView);
	cy += 25;

	mrView = new PatientDataView(cx, cy, cw, ch, "MR#:",mr);
	mainView.subviews.add(mrView);
	cy += 25;

	physicianView = new PatientDataView(cx, cy, cw, ch, "Physician:",physician);
	mainView.subviews.add(physicianView);
	cy += 45;

	otherView = new PatientDataView(cx, cy, cw, ch, "Other:","\n"+other);
	mainView.subviews.add(otherView);
	cy += 25;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
public void setupPOCView()
{
	pocManager = new POCManager();
	pocManager.reset();
}

///////////////////////////////////////////////////////////////////////////////////////////////////
public void setupPopup()
{
	int ppwidth = 570;
	if(OPTION_GRAPH_IN_MAIN_POPUP) ppwidth = 705;
	if(OPTION_ALERT_INFO_BUTTON) ppwidth = 400;
	
	PainPopUpView ppw = new PainPopUpView(ppwidth, pocManager.painLevelView);
	ppw.reset();
	
	GraphPopUpView gp1 = new GraphPopUpView(500, pocManager.anxietyLevelView);
	gp1.reset(anxietyLevelTrend);

	GraphPopUpView gp2 = new GraphPopUpView(500, pocManager.anxietySelfControlView);
	gp2.reset(anxietySelfControlTrend);
	
	GraphPopUpView gp3 = new GraphPopUpView(500, pocManager.painLevelView);
	gp3.reset(painLevelTrend);

	GraphPopUpView gp4 = new GraphPopUpView(500, pocManager.nocFamilyCoping);
	gp4.reset(emptyTrend);
	
	PImage painLevelActionButtonImage = null;
	
	if(OPTION_GRAPH_IN_MAIN_POPUP)
	{
		if( OPTION_NUMBER != 3 &&  OPTION_NUMBER !=4)
		{
			int graphButtonX = 750;
			pocManager.anxietyLevelView.setGraphButton(2, smallGraph1, gp1, graphButtonX); 
			pocManager.anxietySelfControlView.setGraphButton(3, smallGraph2, gp2, graphButtonX); 
			pocManager.nocFamilyCoping.setGraphButton(0, emptySmallGraph, gp4, graphButtonX); 
			painLevelActionButtonImage = smallGraph3;
			pocManager.painLevelView.actionPopUp = ppw;
		}
		else
		{
			int graphButtonX = 750;
			pocManager.anxietyLevelView.setGraphButton(2, smallGraph1, gp1, graphButtonX); 
			pocManager.anxietySelfControlView.setGraphButton(3, smallGraph2, gp2, graphButtonX); 
			pocManager.nocFamilyCoping.setGraphButton(0, emptySmallGraph, gp4, graphButtonX); 
			graphButtonX = 750;
			painLevelActionButtonImage = smallGraph3;
			pocManager.painLevelView.actionPopUp = ppw;
		}
	}
	else
	{
		// Default
		int graphButtonX = 750;
		pocManager.painLevelView.actionPopUp = ppw;
		pocManager.anxietyLevelView.setGraphButton(2, smallGraph1, gp1, graphButtonX); 
		pocManager.anxietySelfControlView.setGraphButton(3, smallGraph2, gp2, graphButtonX); 
		pocManager.painLevelView.setGraphButton(3, smallGraph3, gp3, graphButtonX); 
		pocManager.nocFamilyCoping.setGraphButton(0, emptySmallGraph, gp4, graphButtonX); 
	}

	// alert button position, used for inter-row button alignment
	int alertButtonX;
	if(OPTION_LONG_ALERT_BUTTON)
	{
		alertButtonX = 300;
		pocManager.painLevelView.setAlertButton(3, "Mrs. Taylor's Pain Level is not controlled.", alertButtonX, painLevelActionButtonImage);
	}
	else 
	{
		alertButtonX = 450;
		pocManager.painLevelView.setAlertButton(3, "Actions", alertButtonX, painLevelActionButtonImage);
		pocManager.painLevelView.message = "Mrs. Taylor's Pain Level is not controlled.";
	}
	
	if(OPTION_ALERT_INFO_BUTTON)
	{
		pocManager.painLevelView.setInfoButton(520, 
			"This requires action because analysis of similar patient's data shows: <l> \n " +
			"* It is difficult to control Pain in EOL patients who also have impaired Gas Exchange \n " + 
			"* >50% of EOL patients do not achieve expected NOC Pain Rating by discharge or death\n");
	}
	
	// Cycle 2 addition
	if(CYCLE2_OPTION_NUMBER == 1)
	{
		DeathPopUpView dppw = new DeathPopUpView(400, pocManager.anxietySelfControlView);
		dppw.setupConsultRefuse();
		pocManager.anxietySelfControlView.enableQuickActionButton1(300, 150, MSG_ACTION_CONSULTATION);
		pocManager.anxietySelfControlView.qa1Text.tooltipImage = IMG_CONSULTATION;
		pocManager.anxietySelfControlView.enableQuickActionButton2(300, 300, MSG_ACTION_COPING);
		pocManager.anxietySelfControlView.qa2Text.tooltipImage = IMG_INTERRUPTED_FAMILY_PROCESS;
		pocManager.anxietySelfControlView.actionPopUp = dppw;
	}
	else if(CYCLE2_OPTION_NUMBER == 2)
	{
		DeathPopUpView dppw = new DeathPopUpView(400, pocManager.anxietySelfControlView);
		dppw.setupFull();
		pocManager.anxietySelfControlView.setAlertButton(3, "Action required", alertButtonX, null);
		pocManager.anxietySelfControlView.actionPopUp = dppw;
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
public void draw()
{
	background(backgroundColor); 
	// Draw static view elements
	drawStaticViewElements();

	mainView.draw();
	
	if(tooltipView != null)
	{
		tooltipView.draw();
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
public void drawStaticViewElements()
{
	int footerY = 670;
	int footerX = 1020;
	textFont(fbold);
	
	fill(0);
	textSize(12);
	textAlign(LEFT, CENTER);
	
	image(firstLevelIconLegend, footerX, footerY + 10);
	text("NANDA-I", footerX + 40, footerY + 20);
	image(secondLevelIconLegend, footerX, footerY + 45);
	text("NOC", footerX + 40, footerY + 55);
	image(thirdLevelIconLegend, footerX, footerY + 80);
	text("NIC", footerX + 40, footerY + 90);
	
	int graphLegendX = 1055;
	// Legend Button width, height.
	int bw = 26;
	int bh = 12;
	
	int curY = footerY + 120;
	
	gu.drawButtonBase(graphLegendX - bw - 10, curY - bh / 2, bw, bh, alertLowColor);
	fill(0);
	text("NOC Rating at expected", graphLegendX, curY);
	curY += 35;
	
	gu.drawButtonBase(graphLegendX - bw - 10, curY - bh / 2, bw, bh, alertMidColor);
	fill(0);
	text("NOC rating within point 1 of expected", graphLegendX, curY);
	curY += 35;

	gu.drawButtonBase(graphLegendX - bw - 10, curY - bh / 2, bw, bh, alertHighColor);
	fill(0);
	text("NOC rating 2 or more points below expected", graphLegendX, curY);
	curY += 35;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
public void mouseReleased()
{
	if(popUpView != null)
	{
		if(popUpView.moving) popUpView.moving = false;
	}
	mainView.mouseReleased(mouseX, mouseY);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
public void mouseMoved()
{
	mainView.mouseMoved(mouseX, mouseY);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
public void mouseDragged()
{
	if(popUpView != null)
	{
		if(popUpView.moving)
		{
			popUpView.x = mouseX + popUpView.dragX;
			popUpView.y = mouseY + popUpView.dragY;
		}
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
public void mousePressed()
{
	mainView.mousePressed(mouseX, mouseY);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
public void mouseClicked()
{
	// Kinda hack: if a tooltip window is enabled, a click closes it regardless of where the user clicks.
	if(tooltipView != null)
	{
		tooltipView = null;
		return;
	}
	
	mainView.mouseClicked(mouseX, mouseY);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
public void keyPressed() 
{
	if(!filterKeyInput)
	{
		// if(key == '1')
		// {
			// OPTION_NO_SUGGESTIONS = false;
			// OPTION_LONG_ALERT_BUTTON = true;
			// OPTION_ALERT_INFO_BUTTON = false;
			// OPTION_EXPANDABLE_POPUP_TEXT = false;
			// OPTION_ENABLE_POPUP_TEXT = true;
			// OPTION_GRAPH_IN_MAIN_POPUP = false;
			// OPTION_ENABLE_ACTION_INFO_POPUP = false;
			// OPTION_GRAPH_ALERT_BUTTON = false;
			// OPTION_NUMBER = 1;
			// reset();
		// }
		// else if(key == '3')
		// {
			// OPTION_NO_SUGGESTIONS = false;
			// OPTION_LONG_ALERT_BUTTON = true;
			// OPTION_ALERT_INFO_BUTTON = false;
			// OPTION_EXPANDABLE_POPUP_TEXT = false;
			// OPTION_ENABLE_POPUP_TEXT = true;
			// OPTION_GRAPH_IN_MAIN_POPUP = true;
			// OPTION_ENABLE_ACTION_INFO_POPUP = false;
			// OPTION_GRAPH_ALERT_BUTTON = false;
			// OPTION_NUMBER = 3;
			// reset();
		// }
		if(key == '1')
		{
			OPTION_NO_SUGGESTIONS = false;
			OPTION_LONG_ALERT_BUTTON = false;
			OPTION_EXPANDABLE_POPUP_TEXT = false;
			OPTION_ENABLE_POPUP_TEXT = false;
			OPTION_ALERT_INFO_BUTTON = true;
			OPTION_ENABLE_ACTION_INFO_POPUP = true;
			OPTION_GRAPH_IN_MAIN_POPUP = false;
			OPTION_GRAPH_ALERT_BUTTON = false;
			OPTION_NUMBER = 2;
			CYCLE2_OPTION_NUMBER = 1;
			reset();
		}
		else if(key == '2')
		{
			OPTION_NO_SUGGESTIONS = false;
			OPTION_LONG_ALERT_BUTTON = true;
			OPTION_ALERT_INFO_BUTTON = false;
			OPTION_EXPANDABLE_POPUP_TEXT = false;
			OPTION_ENABLE_POPUP_TEXT = true;
			OPTION_ENABLE_ACTION_INFO_POPUP = false;
			OPTION_GRAPH_IN_MAIN_POPUP = true;
			OPTION_GRAPH_ALERT_BUTTON = true;
			OPTION_NUMBER = 4;
			CYCLE2_OPTION_NUMBER = 1;
			reset();
		}
		if(key == '3')
		{
			OPTION_NO_SUGGESTIONS = false;
			OPTION_LONG_ALERT_BUTTON = false;
			OPTION_EXPANDABLE_POPUP_TEXT = false;
			OPTION_ENABLE_POPUP_TEXT = false;
			OPTION_ALERT_INFO_BUTTON = true;
			OPTION_ENABLE_ACTION_INFO_POPUP = true;
			OPTION_GRAPH_IN_MAIN_POPUP = false;
			OPTION_GRAPH_ALERT_BUTTON = false;
			OPTION_NUMBER = 2;
			CYCLE2_OPTION_NUMBER = 2;
			reset();
		}
		else if(key == '4')
		{
			OPTION_NO_SUGGESTIONS = false;
			OPTION_LONG_ALERT_BUTTON = true;
			OPTION_ALERT_INFO_BUTTON = false;
			OPTION_EXPANDABLE_POPUP_TEXT = false;
			OPTION_ENABLE_POPUP_TEXT = true;
			OPTION_ENABLE_ACTION_INFO_POPUP = false;
			OPTION_GRAPH_IN_MAIN_POPUP = true;
			OPTION_GRAPH_ALERT_BUTTON = true;
			OPTION_NUMBER = 4;
			CYCLE2_OPTION_NUMBER = 2;
			reset();
		}
		else if(key == '0')
		{
			saveFrame("HANDS-"+VERSION+"-####.png");
		}
	}
	if(activeTextBox != null)
	{
		activeTextBox.keypressed();
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
public void roundrect(int x, int y, int w, int h, int r) 
{
    noStroke();
    rectMode(CORNER);

    int  ax, ay, hr;

    ax=x+w-1;
    ay=y+h-1;
    hr = r/2;

    rect(x, y, w, h);
    arc(x, y, r, r, radians(180.0f), radians(270.0f));
    arc(ax, y, r, r, radians(270.0f), radians(360.0f));
    arc(x, ay, r, r, radians(90.0f), radians(180.0f));
    arc(ax, ay, r, r, radians(0.0f), radians(90.0f));
    rect(x, y-hr, w, hr);
    rect(x-hr, y, hr, h);
    rect(x, y+h, w, hr);
    rect(x+w, y, hr, h);

    rectMode(CORNERS);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
class Button extends View 
{
	boolean selected = false, flashing = false;
	String t;
	int buttonColor, textColor;
	PImage icon;
	int style = 1;
	boolean blinking;
	
	// Tooltip mode: 0 = disabled, 1 = open on click, 2 = open on hover.
	String tooltipText;
	PImage tooltipImage;
	
	boolean transparent;
  
	///////////////////////////////////////////////////////////////////////////////////////////////
	Button(float x_, float y_,float w_,float h_, PImage icon_)
	{
		super(x_, y_,w_ ,h_); 
		icon = icon_;
		transparent = true;
		interactive = true;
		tooltipImage = null;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	Button(float x_, float y_,float w_,float h_, String t, int buttonColor, int textColor)
	{
		super(x_, y_,w_ ,h_); 
		this.t = t;
		this.buttonColor = buttonColor;
		this.textColor = textColor;
		icon = null;
		interactive = true;
		transparent = false;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void layout()
	{
		if(w == 0)
		{
			textFont(font);
			textSize(14);
			w = textWidth(t) + 15;
			if(icon != null)
			{
				w += icon.width;
			}
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void drawContent()
	{
		noStroke();

		int baseColor = buttonColor;	
		if(blinking) 
		{
			baseColor = lerpColor(buttonColor, color(200), (1 + sin(radians(frameCount) * 8)) / 2);
		}

		if(!transparent)
		{
			if(style == 0)
			{
				fill(0);
				roundrect(-1, -1, (int)w + 2, (int)h + 2, 5);

				fill(buttonColor);
				roundrect(0,0,(int)w,(int)h,5);
			}
			if(style == 1)
			{
				strokeWeight(1);
				
				gu.drawVGradient(0, 0, w + 1, h + 1, baseColor, 180, baseColor, 255, 0.6f);

				gu.drawBox(0, 0, (int)w, (int)h, 1, 0, 255);
				gu.drawBox(0, 0, (int)w, (int)h, 2, 0, 60);
			}
			if(style == 2)
			{
				textFont(fbold);
				strokeWeight(1);
				stroke(buttonColor);
				line(0, h - 1, w, h - 1);
			}
		}
		
		if(icon != null)
		{
			image(icon, 1, 1);
		}
		
		if(t != null)
		{
			fill(textColor);
			textFont(font);
			textSize(14);
			if(style == 2)
			{
				textFont(fbold);
				fill(buttonColor);
			}
			textAlign(CENTER,CENTER);
			int textW = (int)w;
			if(icon != null) 
			{
				textW -= icon.width;
				text(t, icon.width + textW / 2, h / 2 - 2);
			}
			else
			{
				text(t, textW / 2, h / 2 - 2);
			}
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public boolean contentClicked(float lx, float ly)
	{
	
		if(!OPTION_TOOLTIP_AUTO_OPEN && (tooltipText != null && tooltipText.length() != 0) || tooltipImage != null)
		{
			showTooltip();
		}
		// override this
		// lx, ly are in the local coordinate system of the view,
		// i.e. 0,0 is the top left corner of this view
		// return false if the click is to "pass through" this view
		selected =!selected;
		//System.out.println("Clicked");

		return false;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void showTooltip()
	{
		if(tooltipImage != null)
		{
			tooltipView = new Tooltip(mouseX + 10, mouseY + 10, 300, 60, tooltipImage);
		}
		else
		{
			tooltipView = new Tooltip(mouseX + 10, mouseY + 10, 300, 60, tooltipText);
		}
		
		tooltipView.arrowX = mouseX;
		tooltipView.arrowY = mouseY;
		// If mouse X is closer to border of screen, resize popup accordingly.
		if(mouseX > SCREEN_WIDTH - 300)
		{
			tooltipView.y = mouseY + 20;
			tooltipView.x = mouseX - 100;
			tooltipView.w = 300;
		}
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////
class CheckBox extends View 
{
	boolean selected;
	StaticText text;
	TextBox tb;
	Button iconButton;
	Button infoButton;
	float tw;
	
	int id;
	String tag;

	int checkX = 4;
	int checkY = 4;
	int checkW = 12;
	int checkH = 12;
	
	boolean textBoxEnabled = true;
	boolean textBoxAlwaysVisible = false;
	boolean radio = false;
	
	PopUpViewBase owner = null;
	PopUpSection ownerSection = null;
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	CheckBox(String t, PImage icon1, int id)
	{
		super(0, 0,250,20); 
		this.id = id;
		selected = false;
		this.tag = t;
		text = new StaticText(t);
		subviews.add(text);
		
		if(icon1 != null)
		{
			iconButton = new Button(25, 2, 22, 22, icon1);
			subviews.add(iconButton);
		}
		interactive = true;
		this.selected = selected;
		tb = new TextBox(20,30);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	CheckBox(String t, String tag, PImage icon1, int id)
	{
		super(0, 0,250,20); 
		this.id = id;
		selected = false;
		this.tag = tag;
		text = new StaticText(t);
		subviews.add(text);
		interactive = true;
		if(icon1 != null)
		{
			iconButton = new Button(25, 2, 22, 22, icon1);
			subviews.add(iconButton);
		}
		
		this.selected = selected;
		tb = new TextBox(20,30);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void setInfoButton(String text)
	{
		infoButton = new Button(0, 0, 22, 22, infoIcon);
		infoButton.tooltipText = text;
		subviews.add(infoButton);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void setIconTooltip(String text)
	{
		if(iconButton != null)
		{
			iconButton.tooltipText = text;
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void setIconTooltipImage(PImage img)
	{
		if(iconButton != null)
		{
			iconButton.tooltipImage = img;
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void showTextBox()
	{
		textBoxAlwaysVisible = true;
		this.subviews.add(tb);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void layout()
	{
		if(infoButton != null)
		{
			infoButton.x = text.maxTextWidth + text.x + 10;
		}
		
		w = popUpView.w;
		
		if(textBoxAlwaysVisible)
		{
			tb.x = text.maxTextWidth + text.x + 10;
			tb.w = popUpView.w - tb.x - 70;
			tb.y = 0;
		}
		else
		{
			tb.x = tw + 50;
			tb.w = popUpView.w - tw - 70;
			tb.y = 0;
		}
		
		text.x = 50;
		text.y = 2;
		text.w = w;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void drawContent()
	{
		textAlign(LEFT,CENTER);
		
		int checkColor = 0xff333333;

		checkX = 4;
		checkY = 4;
		checkW = 12;
		checkH = 12;
	
		if(radio)
		{
			checkX = 2;
			checkY = 2;
			checkW = 16;
			checkH = 16;
			
			stroke(0);
			noFill();
			ellipseMode(CORNER);
			ellipse(checkX, checkY, checkW, checkH);
			if(selected)
			{
				checkX += 4;
				checkY += 4;
				checkW -= 8;
				checkH -= 8;
				fill(checkColor, 255);
				ellipse(checkX, checkY, checkW, checkH);
			}
		}
		else
		{
			gu.drawBox(checkX, checkY, checkW, checkH, 1, 0, 255);
			gu.drawBox(checkX, checkY, checkW, checkH, 2, 0, 60);
			if(selected)
			{
				checkX += 4;
				checkY += 4;
				checkW -= 8;
				checkH -= 8;
				gu.drawBox(checkX, checkY, checkW, checkH, 1, checkColor, 180);
				fill(checkColor, 255);
				rect(checkX, checkY, checkX + checkW, checkY + checkH + 1);
			}
		}
		
		fill(0);
	}
  
	///////////////////////////////////////////////////////////////////////////////////////////////
	public boolean contentClicked(float lx, float ly)
	{
		int margin = 4;
		if(lx > checkX - margin && lx < checkX + checkW + margin &&
			ly > checkY - margin && ly < checkY + checkH + margin)
		{
			selected =!selected;
			if(owner != null) owner.onCheckBoxChanged(this);
			if(radio && ownerSection != null) ownerSection.onRadioButtonChanged(this);
			//if(selected) tb.activate();
			//else tb.deactivate();
			if(!textBoxAlwaysVisible)
			{
				if(selected)
				{
					if(textBoxEnabled) this.subviews.add(tb);
					//this.h = 60; 
				} 
				else	
				{
					if(textBoxEnabled) this.subviews.remove(tb);
					//this.h = 20; 
				}
			}
		}
		return true;
	}

}


class ClosePopUpView extends View 
{
	boolean pressed = false;

	///////////////////////////////////////////////////////////////////////////////////////////////
	ClosePopUpView(float x_, float y_,float w_,float h_)
	{
		super(x_, y_,w_ ,h_); 
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void drawContent()
	{
		noStroke();
		textSize(12);
		textFont(fbold);
		fill(30);
		textAlign(LEFT, CENTER);
		rect(0,0,w,h);
		fill(255);
		text("Close Popup    X",w - 120,h/2-2);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public boolean contentClicked(float lx, float ly)
	{
		if(popUpView != null)
		{
			popUpView.hide();
		}
		pressed = true;
		return true;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public boolean contentMoved(float lx, float ly)
	{
		return true;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public boolean contentPressed(float lx, float ly)
	{
		if(popUpView != null)
		{
			println("moving");
			popUpView.moving = true;
			popUpView.dragX = popUpView.x - mouseX;
			popUpView.dragY = popUpView.y - mouseY;
		}
		pressed = true;
		return true;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public boolean contentReleased(float lx, float ly)
	{
		pressed = false;
		return true;
	}
}
class ColouredRowView extends View 
{
	String title;
	public ArrayList subs;  
	boolean deleted = false;
	StaticText commentBox;
	int indent;
	
	Button iconButton;
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	ColouredRowView(String title,PImage logo)
	{
		super(0, 0,width,25);
		this.title = title;
		this.subs = new ArrayList();
		
		iconButton = new Button(0, 0, 16, 16, logo);
		subviews.add(iconButton);
		
		indent = 10;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public void markDeleted()
	{
		deleted = true;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void addComment(String comment)
	{
		commentBox = new StaticText(comment);
		commentBox.w = w;
		subviews.add(commentBox);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void layout()
	{
		h = 25;
		if(commentBox != null)
		{
			commentBox.y = h;
			commentBox.x = indent + 80;
			h += 25;
		}
		iconButton.x = indent;
		iconButton.y = 4;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void drawContent()
	{
		stroke(0);
		fill(colouredRowColor);
		rect(-1,0,w+10,h);
		fill(0);
		
		if(deleted)
		{
			stroke(STYLE_DELETED_ROW_BACK_COLOR);
			fill(STYLE_DELETED_ROW_BACK_COLOR);
		}
		
		textAlign(LEFT,CENTER);
		textFont(fbold);
		textSize(12);
		
		text(title, indent + 35,12);
		
		if(deleted)
		{
			line(0, 15, w, 15);
		}
	}
}
class CommentRowView extends View {

  String comment;
  CommentRowView(float x_, float y_,String title)
  {
    super(x_, y_,width,25);
    this.comment = title;
  }

  public void drawContent()
  {
   stroke(0);
   // textLeading(fbold);
   fill(thirdLevelRowColor);
   rect(-1,0,w+10,h);
   fill(0);
   textSize(10);
   text(comment,115,12);
  }
}
class CommentView extends View
{
  
   public CommentView(float x_, float y_)
  {
    super(x_, y_, 320, 30);
//    text = "";
  }
  
}
///////////////////////////////////////////////////////////////////////////////////////////////////
class DeathPopUpView extends PopUpViewBase
{
	Button descriptionButton;
	
	CheckBox consultCheck;
	CheckBox copingCheck;

	PopUpSection reasonSection;
	PopUpSection recommendedActionSection;
	PopUpSection actionSection;
	
	CheckBox reason1;
	CheckBox reason2;
	CheckBox reason3;
	
	boolean consultCheckAdded = false;
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	DeathPopUpView(int w_, SecondLevelRowView parent)
	{
		super(w_, parent);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void setupFull()
	{
		consultCheck = new CheckBox("Add NIC: Consultation", thirdLevelIcon, 0);
		consultCheck.textBoxEnabled = false;
		consultCheck.owner = this;
		
		//consultCheck.setIconTooltip("Adds consultation to the current NOC");
		consultCheck.setIconTooltipImage(IMG_CONSULTATION);
		recommendedActionSection = new PopUpSection("Recommended actions: ");
		recommendedActionSection.addAction(consultCheck);
		
		copingCheck = new CheckBox("Add NANDA: Family coping mini POC", firstLevelIcon, 0);
		copingCheck.textBoxEnabled = false;
		copingCheck.owner = this;
		
		// copingCheck.setIconTooltip("Adds a NANDA section with: <l> \n " +
			// "<*> <nanda> Interrupted Family Processes \n " +
			// "<*>   <noc> Family Coping \n " +
			// "<*>     <nic> Family Support \n " +
			// "<*>     <nic> Family Integrity Promotion \n " +
			// "<*>     <nic> Health Education: End Of Life Process \n ");
		
		copingCheck.setIconTooltipImage(IMG_INTERRUPTED_FAMILY_PROCESS);
		
		actionSection = new PopUpSection("Also consider: ");
		actionSection.addAction(copingCheck);
		
		consultCheck.selected = true;
		copingCheck.selected = true;
		
		subviews.add(recommendedActionSection);
		subviews.add(actionSection);
		createConsultRefuseSection();
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void createConsultRefuseSection()
	{
		reason1 = new CheckBox("Patient / Family refused", null, 0);
		reason2 = new CheckBox("Doctor refused", null, 0);
		reason3 = new CheckBox("", null, 0);
		
		reason1.radio = true;
		reason2.radio = true;
		reason3.radio = true;
		reason1.textBoxEnabled = false;
		reason2.textBoxEnabled = true;
		reason3.textBoxEnabled = true;
		reason2.showTextBox();
		reason2.tb.suggestion = "Enter doctor name";
		reason3.tb.suggestion = "Other reason";
		reason3.showTextBox();
		
		reason1.selected = true;
		
		//reason1.setIconTooltip(DEF_ACUTE_PAIN);
		//reason2.setIconTooltip(DEF_ENERGY_CONSERVATION);
		//reason3.setIconTooltip(DEF_COPING);
		
		reasonSection = new PopUpSection("Select a reason to dismiss Consultation suggestion: ");
		reasonSection.addAction(reason1);
		reasonSection.addAction(reason2);
		reasonSection.addAction(reason3);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void setupConsultRefuse()
	{
		PopUpSection title = new PopUpSection("Adding consultation is highly recommended. ");
		String alertDescription = "";
		title.setDescription(alertDescription);
		subviews.add(title);
		
		createConsultRefuseSection();
		subviews.add(reasonSection);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public void onCheckBoxChanged(CheckBox cb) 
	{
		if(cb == consultCheck)
		{
			if(!consultCheck.selected)
			{
				subviews.add(4, reasonSection);
			}
			else
			{
				subviews.remove(reasonSection);
			}
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void onOkClicked()
	{
		if(consultCheck != null && consultCheck.selected)
		{
			pocManager.addNIC(NIC_CONSULTATION_TEXT, "", pocManager.anxietySelfControlView, IMG_CONSULTATION);
			actionSection.removeAction(consultCheck);
			parent.addComment("");
			consultCheck = null;
			consultCheckAdded = true;
		}
		else
		{
			if(!consultCheckAdded)
			{
				if(reason1.selected)
				{
					parent.addComment("Dismissed consultation: Family / Patient Refused");
				}
				else if(reason2.selected)
				{
					parent.addComment("Dismissed consultation: Doctor " + reason2.tb.text + " refused");
				}
				else if(reason3.selected)
				{
					parent.addComment("Dismissed consultation: " + reason3.tb.text);
				}
			}
			parent.removeQuickActionButton1();
		}
		if(copingCheck != null && copingCheck.selected)
		{
			pocManager.addNANDA(pocManager.nandaInterruptedFamilyProcess);
			actionSection.removeAction(copingCheck);
			copingCheck = null;
		}
		
		hide();
		
		// If we added both actions and we are in cycle2 option 2, remove the action button from the POC action bar
		if(copingCheck == null && consultCheck == null && CYCLE2_OPTION_NUMBER == 2)
		{
			parent.removeAlertButton();
		}
	}
}
class GradientUtils
{
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  public void drawBox(int x, int y, int width, int height, int dx, int c, int sa)
  {
    strokeWeight(1);
    stroke(c, sa);
    line(x, y - dx, x + width, y - dx);
    line(x, y + height + dx, x + width, y + height + dx);
    line(x - dx, y, x - dx, y + height);
    line(x + width + dx, y, x + width + dx, y + height);
  }
  
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  public void drawButtonBase(int x, int y, int w, int h, int c)
  {
	fill(0);
	drawRoundrect(x - 1, y - 1, (int)w + 2, (int)h + 2, 5);

	fill(c);
	drawRoundrect(x, y, (int)w,(int)h,5);
  }
  
	///////////////////////////////////////////////////////////////////////////////////////////////////
	public void drawRoundrect(int x, int y, int w, int h, int r) 
	{
		noStroke();
		rectMode(CORNER);

		int  ax, ay, hr;

		ax=x+w-1;
		ay=y+h-1;
		hr = r/2;

		rect(x, y, w, h);
		arc(x, y, r, r, radians(180.0f), radians(270.0f));
		arc(ax, y, r, r, radians(270.0f), radians(360.0f));
		arc(x, ay, r, r, radians(90.0f), radians(180.0f));
		arc(ax, ay, r, r, radians(0.0f), radians(90.0f));
		rect(x, y-hr, w, hr);
		rect(x-hr, y, hr, h);
		rect(x, y+h, w, hr);
		rect(x+w, y, hr, h);

		rectMode(CORNERS);
	}

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  public void drawGradient(int x, int y, int width, int height, int start, int sa, int end, int ea)
  {
    noStroke();
    beginShape(QUADS);
    
    fill(start, sa);
    vertex(x, y);
    vertex(x + width, y);
    
    fill(end, ea);
    vertex(x + width, y + height);
    vertex(x, y + height);
    
    endShape(); 
  }
  
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  public void drawVGradient(float x, float y, float width, float height, int start, int sa, int end, int ea, float pc)
  {
    noStroke();
    fill(start, sa);
    
    float h1 = PApplet.parseInt(height * pc);
    
    rect(x, y, width, h1);
    y += h1;
    height -= h1;
    
    beginShape(QUADS);
    
    vertex(x, y);
    vertex(x + width, y);
    
    fill(end, ea);
    vertex(x + width, y + height);
    vertex(x, y + height);
    
    endShape(); 
  }
  
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  public void drawHGradient(float x, float y, float width, float height, int start, int sa, int end, int ea, float pc)
  {
    noStroke();
    fill(start, sa);
    
    float w1 = PApplet.parseInt(width * pc);
    
    rect(x, y, w1, height);
    x += w1;
    width -= w1;
    
    beginShape(QUADS);
    
    vertex(x, y + height);
    vertex(x, y);

    fill(end, ea);
    vertex(x + width, y);
    vertex(x + width, y + height);
    
    endShape(); 
  }
  
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  public void drawGradient2(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4, int start, int sa, int end, int ea)
  {
    noStroke();
    beginShape(QUADS);
    
    fill(start, sa);
    vertex(x1, y1);
    vertex(x2, y2);
    
    fill(end, ea);
    vertex(x3, y3);
    vertex(x4, y4);
    
    endShape(); 
  }
}
///////////////////////////////////////////////////////////////////////////////////////////////////
class GraphPopUpView extends View
{
	float arrowX, arrowY;
	SecondLevelRowView parent;
	ClosePopUpView close;

	///////////////////////////////////////////////////////////////////////////////////////////////
	GraphPopUpView(float w_, SecondLevelRowView parent)
	{
		super(0, 0,w_ ,0);
		close = new ClosePopUpView(0,0,w,20);
		this.subviews.add(close);
		this.parent = parent;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void reset(PImage img)
	{
		PopUpSection title = new PopUpSection("");
		title.setImage(img);
		title.w = w;
		subviews.add(title);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public void hide() 
	{
		mainView.subviews.remove(this);
		popUpView = null;
		if(activeTextBox != null) activeTextBox.deactivate();
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void layout()
	{
		h = 0;
		for(int i = 0; i < subviews.size();i++)
		{
			View w = (View)popUpView.subviews.get(i);
			w.y = h;
			h += w.h;
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public void drawContent()
	{
		int border = 5;
		fill(0, 0, 0, 180);
		noStroke();
		rect(-border, -border, w + border, h + border);
		triangle(-border, 10, arrowX - x, arrowY - y, -border, h - 10);
		fill(255);
		rect(0, 0, w, h);
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////
class POCManager
{
	// NANDA lines
	ColouredRowView impairedGasExchange;
	ColouredRowView deathAnxietyView;
	ColouredRowView acutePainView;
	
	// NOC Lines
	SecondLevelRowView anxietyLevelView;
	SecondLevelRowView anxietySelfControlView;
	SecondLevelRowView painLevelView; 
	
	ThirdLevelRowView musicTherapyView;
	ThirdLevelRowView calmingTechniqueView;
	ThirdLevelRowView calmingTechniqueView_2; 
	ThirdLevelRowView spiritualSupportView;
	ThirdLevelRowView medicationManagementView;
	ThirdLevelRowView painManagementView;
	ScrollingView scrollingView;
	
	// Cycle 2
	
	// Family coping stuff
	ColouredRowView nandaInterruptedFamilyProcess;
	SecondLevelRowView nocFamilyCoping;
	ThirdLevelRowView nicFamilySupport;
	ThirdLevelRowView nicFamilyIntegrityPromotion;
	ThirdLevelRowView nicEducationEOL;
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void reset()
	{
		scrollingView = new ScrollingView(0, 80, SCREEN_WIDTH - 400, SCREEN_HEIGHT - 100);
		mainView.subviews.add(scrollingView);

		impairedGasExchange = new ColouredRowView("Impaired Gas Exchange",firstLevelIcon);
		impairedGasExchange.iconButton.tooltipImage = IMG_IMP_GAS_EXC;
		scrollingView.subs.add(impairedGasExchange);  

		anxietyLevelView = new SecondLevelRowView("Anxiety Level",secondLevelIcon,3,3,impairedGasExchange);
		anxietyLevelView.iconButton.tooltipImage = IMG_ANXIETY_LEVEL;
		impairedGasExchange.subs.add(anxietyLevelView);

		musicTherapyView = new ThirdLevelRowView("Music Therapy", thirdLevelIcon,anxietyLevelView);
		musicTherapyView.iconButton.tooltipImage = IMG_MUSIC_THERAPY;
		anxietyLevelView.subs.add(musicTherapyView);

		calmingTechniqueView = new ThirdLevelRowView("Calming Technique",thirdLevelIcon,anxietyLevelView);
		calmingTechniqueView.iconButton.tooltipImage = IMG_CALMING_TECHNIQUE;
		anxietyLevelView.subs.add(calmingTechniqueView);

		deathAnxietyView = new ColouredRowView("Death Anxiety",firstLevelIcon);
		deathAnxietyView.iconButton.tooltipImage = IMG_DEATH_ANXIETY;
		scrollingView.subs.add(deathAnxietyView);

		anxietySelfControlView = new SecondLevelRowView("Comfortable Death",secondLevelIcon,2,5,deathAnxietyView);
		anxietySelfControlView.iconButton.tooltipImage = IMG_COMFORTABLE_DEATH;
		deathAnxietyView.subs.add(anxietySelfControlView);

		calmingTechniqueView_2 = new ThirdLevelRowView("Calming Technique",thirdLevelIcon,anxietySelfControlView);
		calmingTechniqueView_2.iconButton.tooltipImage = IMG_CALMING_TECHNIQUE;
		anxietySelfControlView.subs.add(calmingTechniqueView_2);

		spiritualSupportView = new ThirdLevelRowView("Spiritual Support",thirdLevelIcon,anxietySelfControlView);
		spiritualSupportView.iconButton.tooltipImage = IMG_SPIRITUAL_SUPPORT;
		anxietySelfControlView.subs.add(spiritualSupportView);

		spiritualSupportView.addComment("Family Priest to Visit 2am");

		acutePainView = new ColouredRowView("Acute Pain",firstLevelIcon);
		acutePainView.iconButton.tooltipImage = IMG_ACUTE_PAIN;
		scrollingView.subs.add(acutePainView);

		painLevelView = new SecondLevelRowView("Pain Level",secondLevelIcon,1,5,acutePainView);
		painLevelView.iconButton.tooltipImage = IMG_PAIN_LEVEL;
		acutePainView.subs.add(painLevelView);
		
		medicationManagementView = new ThirdLevelRowView("Medication Management",thirdLevelIcon,painLevelView);
		medicationManagementView.iconButton.tooltipImage = IMG_MEDICATION_MANAGEMENT;
		painLevelView.subs.add(medicationManagementView);

		painManagementView = new ThirdLevelRowView("Pain Management",thirdLevelIcon,painLevelView);
		painManagementView.iconButton.tooltipImage = IMG_PAIN_MANAGEMENT;
		painLevelView.subs.add(painManagementView);
		
		// Cycle 2 stuff
		nandaInterruptedFamilyProcess = new ColouredRowView("Interrupted Family Processes", firstLevelIcon);
		nandaInterruptedFamilyProcess.iconButton.tooltipImage = IMG_INTERRUPTED_FAMILY_PROCESS;

		nocFamilyCoping = new SecondLevelRowView("Family Coping", secondLevelIcon, 0, 0, nandaInterruptedFamilyProcess);
		nocFamilyCoping.iconButton.tooltipImage = IMG_FAMILY_COPING;
		nandaInterruptedFamilyProcess.subs.add(nocFamilyCoping);
		
		nicFamilySupport = new ThirdLevelRowView("Family Support", thirdLevelIcon, nocFamilyCoping);
		nicFamilySupport.iconButton.tooltipImage = IMG_FAMILY_SUPPORT;
		nocFamilyCoping.subs.add(nicFamilySupport);
		
		nicFamilyIntegrityPromotion = new ThirdLevelRowView("Family Integrity Promotion", thirdLevelIcon, nocFamilyCoping);
		nicFamilyIntegrityPromotion.iconButton.tooltipImage = IMG_FAMILY_INTEGRITY_PROMOTION;
		nocFamilyCoping.subs.add(nicFamilyIntegrityPromotion);
		
		nicEducationEOL = new ThirdLevelRowView("Health Education: End Of Life Process", thirdLevelIcon, nocFamilyCoping);
		nicEducationEOL.iconButton.tooltipImage = IMG_HEALTH_EDUCATION;
		nocFamilyCoping.subs.add(nicEducationEOL);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void addNIC(String text, String comment,SecondLevelRowView parentNOC, PImage tooltip)
	{
		ThirdLevelRowView temp = new ThirdLevelRowView(text,thirdLevelIcon,parentNOC);
		temp.iconButton.tooltipImage = tooltip;
		if(comment.length() != 0) temp.addComment(comment);
				
		for(int k =0 ; k < parentNOC.subs.size();k++)
		{
			ThirdLevelRowView tempo = (ThirdLevelRowView)parentNOC.subs.get(k);
                   	tempo.y = temp.y+((k+1)*temp.h);
		}
		//mainView.subviews.add(medicationManagementView);
		parentNOC.subs.add(temp);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void addNOC(String text,String comment, ColouredRowView parentNANDA, PImage tooltip)
	{
		SecondLevelRowView temp = new SecondLevelRowView(text, secondLevelIcon, 0, 0, parentNANDA);
		temp.iconButton.tooltipImage = tooltip;
		GraphPopUpView gp = new GraphPopUpView(500, temp);
		gp.reset(emptyTrend);
		temp.setGraphButton(0, emptySmallGraph, gp, 750); 
		
		if(comment.length() != 0) temp.addComment(comment);
					
		for(int k =0 ; k < parentNANDA.subs.size();k++)
		{
			SecondLevelRowView tempo = (SecondLevelRowView)parentNANDA.subs.get(k);
                       tempo.y = temp.y+((k+1)*temp.h);
		}
		//mainView.subviews.add(medicationManagementView);
		parentNANDA.subs.add(0,temp);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void deleteNANDA(ColouredRowView nanda)
	{
		nanda.markDeleted();
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void prioritizeNANDA(ColouredRowView nanda)
	{
		scrollingView.subs.remove(nanda);
		scrollingView.subs.add(0, nanda);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void addNANDA(ColouredRowView nanda)
	{
		scrollingView.subs.add(nanda);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public int getBottom()
	{
		return (int)scrollingView.y + (int)scrollingView.h;
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////
class PainPopUpView extends PopUpViewBase
{
	int ADD_NIC = 0;
	int ADD_NOC = 1;
	int REMOVE_NANDA = 2;
	int PRIORITIZE_NANDA = 3;
	
	Button descriptionButton;
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	PainPopUpView(int w_, SecondLevelRowView parent)
	{
		super(w_, parent);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void setupPainTitleSection()
	{
		PopUpSection title = new PopUpSection("<h1> Mrs. Taylor's Pain Level is not controlled");
		String alertDescription = MSG_PAIN_EVIDENCE_POPUP;
		
		if(OPTION_ENABLE_POPUP_TEXT)
		{
			if(OPTION_GRAPH_ALERT_BUTTON)
			{
				descriptionButton = new Button(
					322, 55, 0, 20, "Action required!", alertHighColor, 0);
				descriptionButton.tooltipText = alertDescription;
				descriptionButton.blinking = true;
				title.subviews.add(descriptionButton);
			}
			else
			{
				title.setDescription(alertDescription);
			}
			title.separatorStyle = 1;
			if(OPTION_EXPANDABLE_POPUP_TEXT) title.enableExpandableDescription();
			// v2.1: graph has info button (we hack the infobutton from popup section)
			if(OPTION_GRAPH_IN_MAIN_POPUP)
			{
				title.setImage(painLevelTrend);
				title.setInfoButton(MSG_PAIN_GRAPH_DESCRIPTION);
			}
		}
		subviews.add(title);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void setupPainActionSections()
	{
		// v2.1: on option 2 we do not use the star icon.
		String positioningText = "Positioning <b> (Recommended) </b> <s1>";
		if(OPTION_NUMBER == 2)
		{
			positioningText = "Positioning <b> (Recommended) </b>";
		}
		
		CheckBox c = new CheckBox(positioningText, "Positioning", thirdLevelIcon, ADD_NIC);
		c.setIconTooltipImage(IMG_POSITIONING);
		if(OPTION_ENABLE_ACTION_INFO_POPUP)
		{
			c.setInfoButton("Analysis of similar patient's data shows: <l> \n " +
							"A combination of Medication Management, Positioning and Pain Management has most positive impact on Pain Level.\n");
		}
		CheckBox c1 = new CheckBox("Acute Pain", firstLevelIcon, PRIORITIZE_NANDA);
		CheckBox c2 = new CheckBox("Impaired Gas Exchange", firstLevelIcon, REMOVE_NANDA);
		CheckBox c3 = new CheckBox("Energy Conservation", secondLevelIcon, ADD_NOC);
		CheckBox c4 = new CheckBox("Coping", secondLevelIcon, ADD_NOC);
		CheckBox c5 = new CheckBox("Patient controlled analgesia", thirdLevelIcon, ADD_NIC);
		CheckBox c6 = new CheckBox("Massage", thirdLevelIcon, ADD_NIC);
		CheckBox c7 = new CheckBox("Relaxation Therapy", thirdLevelIcon, ADD_NIC);
		CheckBox c8 = new CheckBox("Guided Imagery", thirdLevelIcon, ADD_NIC);
		
		c1.setIconTooltipImage(IMG_ACUTE_PAIN);
		c2.setIconTooltipImage(IMG_IMPAIRED_GAS_EXCHANGE);
		c3.setIconTooltipImage(IMG_ENERGY_CONSERVATION);
		c4.setIconTooltipImage(IMG_COPING);
		c5.setIconTooltipImage(IMG_PATIENT_CONTROLLED_ANALGESIA);
		c6.setIconTooltipImage(IMG_MASSAGE);
		c7.setIconTooltipImage(IMG_MASSAGE);
		c8.setIconTooltipImage(IMG_GUIDED_IMAGERY);
		
		PopUpSection addSection = new PopUpSection("Consider Adding: ");
		addSection.addAction(c);
		addSection.addAction(c3);
		addSection.addAction(c4);
		addSection.addAction(c5);
		addSection.addAction(c6);
		addSection.addAction(c7);
		addSection.addAction(c8);
		
		PopUpSection removeSection = new PopUpSection("Consider Removing: ");
		removeSection.addAction(c2);
		
		PopUpSection prioritizeSection = new PopUpSection("Consider Prioritizing: ");
		prioritizeSection.addAction(c1);
		
		subviews.add(addSection);
		subviews.add(removeSection);
		subviews.add(prioritizeSection);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void reset()
	{
		setupPainTitleSection();
		setupPainActionSections();
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void onOkClicked()
	{
		parent.stopBlinking();		
		for(int i = 0; i < subviews.size(); i++)
		{
			View v = (View)subviews.get(i);
			if(v != commit && v != notApplicable && v != close)
			{
				PopUpSection pps = (PopUpSection)v;
				ArrayList toRemove = new ArrayList();
				if(pps.actionBoxes != null) 
				{
					for(int j = 0; j < pps.actionBoxes.size(); j++)
					{
						CheckBox c = pps.actionBoxes.get(j);
						if(c.selected)
						{
							toRemove.add(c);
							if(c.id == ADD_NIC)
							{
								pocManager.addNIC(c.tag, c.tb.text, parent, c.iconButton.tooltipImage);
							}
							if(c.id == ADD_NOC)
							{
								pocManager.addNOC(c.tag, c.tb.text, parent.parent, c.iconButton.tooltipImage);
							}
							if(c.id == REMOVE_NANDA)
							{
								pocManager.deleteNANDA(pocManager.impairedGasExchange);
								if(c.tb.text.length() != 0) pocManager.impairedGasExchange.addComment(c.tb.text);
							}
							if(c.id == PRIORITIZE_NANDA)
							{
								pocManager.prioritizeNANDA(parent.parent);
								if(c.tb.text.length() != 0) parent.parent.addComment(c.tb.text);
							}
						}
					}
				}
				// Remove checked items after a commit.
				for(int j = 0; j < toRemove.size(); j++)
				{
					v.subviews.remove(toRemove.get(j));
					pps.actionBoxes.remove(toRemove.get(j));
				}
			}
		}
		mainView.subviews.remove(this);
		popUpView = null;
	}
}
class PatientDataView extends View 
{
	String title, entry;
  
	///////////////////////////////////////////////////////////////////////////////////////////////
	PatientDataView(float x_, float y_,float w_,float h_,String title, String entry)
	{
		super(x_, y_,w_ ,h_);
		this.title = title;
		this.entry = entry;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public void drawContent()
	{
		noStroke();
		// textLeading(fbold);
		fill(0);
		textSize(12);
		text(title,10,15);
		textFont(font);
		textSize(12);
		text(entry, 125,15);
		textFont(fbold);
	}
}
class PopUpSection extends View 
{
	String title;
	
	StaticText titleBox;
	StaticText descriptionBox;
	
	Button titleButton;
	int titleButtonMode;
	
	int separatorStyle;
	ArrayList<CheckBox> actionBoxes;
	
	PImage img;

	///////////////////////////////////////////////////////////////////////////////////////////////
	PopUpSection(String title)
	{
		super(0, 0, 400, 0);
		// if(actions != null) 
		// {
			// h = 60 + (actions.size() * 20);
		// }
		// else
		// {
			// h = 60;
		// }
		
		this.title = title;
		this.titleBox = new StaticText("<b> <h1> " + title);
		subviews.add(titleBox);
		
		//actionBoxes = actions;
		
		// if(actions != null)
		// {
			// int ys = 35;
			// for(int i = 0; i < actions.size(); i++)
			// {
				// CheckBox c = actions.get(i);
				// c.y = ys;
				// this.subviews.add(c);
				// ys += 25;
			// }
		// }		
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void addAction(CheckBox action)
	{
		if(actionBoxes == null) actionBoxes = new ArrayList<CheckBox>();
		actionBoxes.add(action);
		subviews.add(action);
		action.ownerSection = this;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void removeAction(CheckBox action)
	{
		actionBoxes.remove(action);
		subviews.remove(action);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void setDescription(String text)
	{
		descriptionBox = new StaticText(text);
		subviews.add(descriptionBox);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void setInfoButton(String text)
	{
		titleButton = new Button(0, 0, 16, 16, infoIcon);
		titleButton.tooltipText = text;
		subviews.add(titleButton);
		//titleButtonMode = 1;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void onRadioButtonChanged(CheckBox cb)
	{
		// Can't unselect a selected radio button. Must click on different one. Fix selection
		if(!cb.selected) cb.selected = true;
		else
		{
			for(int j = 0; j < actionBoxes.size(); j++)
			{
				CheckBox c = actionBoxes.get(j);
				if(c != cb) c.selected = false;
			}
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void setImage(PImage img)
	{
		this.img = img;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void enableExpandableDescription()
	{
		titleButton = new Button(0, 0, 16, 16, infoIcon);
		subviews.add(titleButton);
		titleButtonMode = 2;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void layout()
	{
		titleBox.x = 10;
		titleBox.y = 0;
		titleBox.w = w;
		h = titleBox.h + 10;
		if(descriptionBox != null)
		{
			if(titleButtonMode == 2)
			{
				descriptionBox.visible = titleButton.selected;
				if(titleButton.selected)
				{
					descriptionBox.y = titleBox.h + 10;
					descriptionBox.x = 10;
					descriptionBox.w = w - 10;
					h = descriptionBox.y + descriptionBox.h;
				}
			}
			if(titleButtonMode == 0)
			{
				descriptionBox.y = titleBox.h + 10;
				descriptionBox.x = 10;
				descriptionBox.w = w - 10;
				h = descriptionBox.y + descriptionBox.h;
			}
		}
		// v2.1: place the info icon under the description (will fall next to the graph)
		if(titleButton != null)
		{
			titleButton.w = 16;
			titleButton.h = 16;
			titleButton.y = h;
			titleButton.x = 600;
		}
		if(img != null)
		{
			if(titleButtonMode == 2)
			{
				if(titleButton.selected)
				{
					h += img.height + 10;
				}
			}
			if(titleButtonMode == 0)
			{
				h += img.height + 10;
			}
		}
		if(actionBoxes != null)
		{
			for(int i = 0; i < actionBoxes.size(); i++)
			{
				CheckBox cb = actionBoxes.get(i);
				cb.x = 15;
				cb.y = h;
				h += cb.h + 10;
			}
		}
		if(separatorStyle != 0)
		{
			h += 16;
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void drawContent()
	{
		noStroke();
		//fill(popUpSectionColor);
		//rect(0,0,w,h);
		
		if(img != null)
		{
			int imageY = (int)titleBox.h + 5;
			if(descriptionBox != null)
			{
				imageY = (int)descriptionBox.y + (int)descriptionBox.h + 10;
			}
			int imageX = (int)w / 2 - img.width / 2;
			if(titleButtonMode == 2)
			{
				if(titleButton.selected)
				{
					image(img, imageX, imageY);
				}
			}
			else
			{
				image(img, imageX, imageY);
			}
		}

		if(separatorStyle != 0)
		{
			strokeWeight(3);
			stroke(0);
			line(0, h - 2, w, h - 2);
			strokeWeight(1);
		}
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
class PopUpViewBase extends View 
{
	float arrowX, arrowY;
	Button commit, notApplicable;
	SecondLevelRowView parent;
	ClosePopUpView close;
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	PopUpViewBase(float w_, SecondLevelRowView parent)
	{
		super(0, 0,w_ ,0);
		close = new ClosePopUpView(0,-20,w,20);
		this.subviews.add(close);
		
		//commit = new Button(20,0,150,20,"Save Changes",0,255);
		//notApplicable = new Button(200,0,180,20,"Mark as Read",0,255);
		commit = new Button(20,0,150,20,"Save to POC",200,0);
		notApplicable = new Button(200,0,180,20,"Close without saving",200,0);
		
		this.subviews.add(commit);
		this.subviews.add(notApplicable);	
		this.parent = parent;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void reset()
	{
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void layout()
	{
		h = 0;
		for(int i = 0; i < subviews.size();i++)
		{
			View v = (View)popUpView.subviews.get(i);
			v.y = h;
			h += v.h;
			if(v != commit && v != notApplicable && v != close)
			{
				v.w = this.w;
			}
		}
		
		// v2.1: popup never goes off-screen vertically.
		if(y + h > SCREEN_HEIGHT)
		{
			y = SCREEN_HEIGHT - h;
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public void drawContent()
	{
		int ys = 0;
		for(int i = 0 ;i<subviews.size();i++)
		{
			View v = (View)subviews.get(i);

			if(!v.equals(commit) && !v.equals(notApplicable))
			{
				v.y = ys;
				ys +=v.h;
			}
		}
		
		commit.y = ys;
		notApplicable.y = ys;  

		int border = 5;
		fill(0, 0, 0, 180);
		noStroke();
		rect(-border, -border, w + border, h + border);
		triangle(-border, 10, arrowX - x, arrowY - y, -border, ys - 10);
		fill(255);
		rect(0, 0, w, h);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void onAbortClicked() 
	{
		parent.stopBlinking();		
		hide();
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void onCheckBoxChanged(CheckBox cb) 
	{
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void hide() 
	{
		mainView.subviews.remove(this);
		popUpView = null;
		if(activeTextBox != null) activeTextBox.deactivate();
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void onOkClicked() 
	{
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public boolean contentClicked(float lx, float ly)
	{
		if(notApplicable.selected)
		{
			onAbortClicked();
			notApplicable.selected = false;
		}
		if(commit.selected)
		{
			onOkClicked();
			commit.selected = false;
		}
		return true;
	}
}
class RationaleActionBar extends View {


  RationaleActionBar(float x_, float y_,float w_,float h_)
  {
    super(x_, y_,w_ ,h_); 
  }
  public void drawContent()
  {
    noStroke();
  fill(closePopUpColor);
  rect(0,0,w,h);
  fill(255);
  text("Close Popup    X",w - 100,h/2-2);
  }
}
///////////////////////////////////////////////////////////////////////////////////////////////////
class ScrollingView extends View 
{
	ArrayList subs;
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	ScrollingView(float x_, float y_, float w_, float h_)
	{
		super(x_, y_, w_, h_);
		subs = new ArrayList();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public void drawContent()
	{
		fill(0);
		text("Current \nRating", 840, - 30);
		text("Expected \nRating", 940, - 30);
	
		strokeWeight(4);
		stroke(0);
		fill(255);
		rect(-5,0,w+10,h);
		strokeWeight(1);
		this.subviews =  new ArrayList();
		int usedSpace = 0;
		for (int i = 0; i < this.subs.size() && usedSpace < h;i++ ) 
		{
			ColouredRowView tempRow = (ColouredRowView) subs.get(i);
			tempRow.y = usedSpace;
			tempRow.w = this.w;
			usedSpace += tempRow.h;
			this.subviews.add(tempRow);
			for (int j = 0; j < tempRow.subs.size() && usedSpace < h; j++ ) 
			{
				SecondLevelRowView tempRow2 = (SecondLevelRowView) tempRow.subs.get(j);
				tempRow2.y = usedSpace;
				tempRow2.w = this.w;
				usedSpace += tempRow2.h;
				this.subviews.add(tempRow2);
				for (int k = 0; k < tempRow2.subs.size() && usedSpace < h; k++ ) 
				{
					ThirdLevelRowView tempRow3 = (ThirdLevelRowView) tempRow2.subs.get(k);
					tempRow3.y = usedSpace;
					tempRow3.w = this.w;
					usedSpace += tempRow3.h;
					if(usedSpace <= h) this.subviews.add(tempRow3);
				}
			}
		}
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
class SecondLevelRowView extends View 
{
	String title;
	String message;
	Button iconButton;
	StaticText commentBox;
	int firstColumn,secondColumn;
	public ArrayList subs ;
	int indent;

	Button graphButton, actionButton;
	Button infoButton;

	PopUpViewBase actionPopUp;
	
	GraphPopUpView graphPopUp;
	ColouredRowView parent;
	
	// Cycle 2 stuff
	StaticText qa1Text;
	Button qa1YesButton;
	Button qa1NoButton;
	
	StaticText qa2Text;
	Button qa2YesButton;
	Button qa2NoButton;
          
	///////////////////////////////////////////////////////////////////////////////////////////////
	SecondLevelRowView(String title,PImage logo, int firstColumn, int secondColumn, ColouredRowView parent)
	{
		super(0, 0,width,25);
		this.title = title;
		iconButton = new Button(0, 0, 16, 16, logo);
		subviews.add(iconButton);
		this.firstColumn = firstColumn;
		this.secondColumn = secondColumn;
		this.subs = new ArrayList();
		this.parent=  parent;
		indent = 40;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public void addComment(String comment)
	{
		if(comment == "")
		{
			if(commentBox != null)
			{
				subviews.remove(commentBox);
				commentBox = null;
			}
		}
		else
		{
			if(commentBox == null)
			{
				commentBox = new StaticText(comment);
				subviews.add(commentBox);
				commentBox.w = w;
			}
			else
			{
				commentBox.setText(comment);
			}
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void layout()
	{
		h = 25;
		if(commentBox != null)
		{
			commentBox.y = h;
			commentBox.x = indent + 80;
			h += 25;
		}
		iconButton.x = indent;
		iconButton.y = 4;
	}
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void drawContent()
	{
		stroke(0);
		
		fill(secondLevelRowColor);
		rect(-1,0,w+10,h);
		fill(0);
		
		if(parent.deleted)
		{
			stroke(STYLE_DELETED_ROW_BACK_COLOR);
			fill(STYLE_DELETED_ROW_BACK_COLOR);
			if(graphButton != null)
			{
				subviews.remove(graphButton);
				graphButton = null;
			}
		}		
		
		textAlign(LEFT,CENTER);
		textFont(fbold);
		textSize(12);
		text(title, indent + 35,12);
		
		if(parent.deleted)
		{
			line(0, 15, w, 15);
		}
		
		if(firstColumn != 0) text(firstColumn, 850, 12); else text("NR", 850, 12);
		if(secondColumn != 0) text(secondColumn, 950, 12); else text("NR", 950, 12);

		if(message != null)
		{
			fill(alertHighColor);
			text(message, 170, 12);
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void enableQuickActionButton1(int cx, int textWidth, String text)
	{
		//float cx = 250;
		qa1Text = new StaticText(text);
		qa1Text.w = textWidth;
		qa1Text.x = cx;
		qa1Text.y = 4;
		subviews.add(qa1Text);
		cx += qa1Text.w - 10;
		qa1YesButton = new Button(cx, 1, 24, 24, checkIcon);
		subviews.add(qa1YesButton);
		cx += 28;
		qa1NoButton = new Button(cx, 1, 24, 24, crossIcon);
		subviews.add(qa1NoButton);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void enableQuickActionButton2(int cx, int textWidth, String text)
	{
		//float cx = 550;
		qa2Text = new StaticText(text);
		qa2Text.w = textWidth;
		qa2Text.x = cx;
		qa2Text.y = -20;
		subviews.add(qa2Text);
		cx += qa2Text.w - 10;
		qa2YesButton = new Button(cx, -22, 24, 24, checkIcon);
		subviews.add(qa2YesButton);
		cx += 28;
		qa2NoButton = new Button(cx, -22, 24, 24, crossIcon);
		subviews.add(qa2NoButton);
		
		// expand focus area fo this view to cover external button
		focusy = -20;
		focush = h;
		focusx = 30;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void removeQuickActionButton1()
	{
		subviews.remove(qa1NoButton);
		subviews.remove(qa1YesButton);
		subviews.remove(qa1Text);
		qa1NoButton = null;
		qa1YesButton = null;
		qa1Text = null;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void removeQuickActionButton2()
	{
		subviews.remove(qa2NoButton);
		subviews.remove(qa2YesButton);
		subviews.remove(qa2Text);
		qa2NoButton = null;
		qa2YesButton = null;
		qa2Text = null;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void setInfoButton(int bx, String text)
	{
		infoButton = new Button(bx, 1, 24, 24, infoIcon);
		infoButton.tooltipText = text;
		subviews.add(infoButton);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void setAlertButton(int level, String text, int bx, PImage graph)
	{
		int buttonColor = 0;
		if(level == 1) buttonColor = alertLowColor;
		if(level == 2) buttonColor = alertMidColor;
		if(level == 3) buttonColor = alertHighColor;

		this.actionButton = new Button(bx, 5, 0, 16, text, buttonColor, 0);
		this.actionButton.blinking = true;
		subviews.add(this.actionButton);
		
		if(graph != null)
		{
			this.actionButton.icon = graph;
		}
		
		//this.actionButton.tooltipText = "Tooltip text, bla bla bla ba bla blag askdj sfjwev fweic";
		//this.actionButton.tooltipMode = 1;

		//this.actionPopUp = p;   
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public void removeAlertButton()
	{
		if(actionButton != null)
		{
			subviews.remove(actionButton);
			actionButton = null;
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void setGraphButton(int level, PImage graphIcon, GraphPopUpView p, int x)
	{
		int buttonColor = 200;
		if(level == 1) buttonColor = alertLowColor;
		if(level == 2) buttonColor = alertMidColor;
		if(level == 3) buttonColor = alertHighColor;
		graphButton = new Button(x, 5, 40, 16, graphIcon);
		graphButton.transparent = false;
		graphButton.buttonColor = buttonColor;
		subviews.add(this.graphButton);
		if(level == 3) graphButton.blinking = true;
		this.graphPopUp = p;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void showPopUp()
	{
		if(popUpView == null)
		{
			mainView.subviews.add(actionPopUp);
			popUpView = actionPopUp;
			actionPopUp.x = mouseX + 50;
			actionPopUp.y = mouseY - 350;
			actionPopUp.arrowX = mouseX;
			actionPopUp.arrowY = mouseY;
			if(actionPopUp.y < 50) actionPopUp.y = 50;
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public boolean contentClicked(float lx, float ly)
	{
		if(qa1NoButton != null)
		{
			if(qa1NoButton.selected)
			{
				qa1NoButton.selected = false;
				showPopUp();
				stopBlinking();		
			}
		}
		if(qa1YesButton != null)
		{
			if(qa1YesButton.selected)
			{
				qa1YesButton.selected = false;
				removeQuickActionButton1();
				pocManager.addNIC(NIC_CONSULTATION_TEXT, "", pocManager.anxietySelfControlView, IMG_CONSULTATION);
				stopBlinking();		
			}
		}
		if(qa2YesButton != null)
		{
			if(qa2YesButton.selected)
			{
				qa2YesButton.selected = false;
				removeQuickActionButton2();
				pocManager.addNANDA(pocManager.nandaInterruptedFamilyProcess);
			}
		}
		if(qa2NoButton != null)
		{
			if(qa2NoButton.selected)
			{
				qa2NoButton.selected = false;
				removeQuickActionButton2();
			}
		}
		if(actionButton != null)
		{
			if(actionButton.selected)
			{
				showPopUp();
				actionButton.selected = false;
			}
		}
		if(graphButton != null)
		{
			if(graphButton.selected)
			{
				if(popUpView == null)
				{
					mainView.subviews.add(graphPopUp);
					popUpView = graphPopUp;
					graphPopUp.x = mouseX + 20;
					graphPopUp.y = mouseY - 50;
					graphPopUp.arrowX = mouseX;
					graphPopUp.arrowY = mouseY;
				}
				graphButton.selected = false;
			}
		}
		return true;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void stopBlinking()
	{
		if(actionButton != null) actionButton.blinking = false;
		if(graphButton != null) graphButton.blinking = false;
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////
class StaticText extends View 
{
	String text;
	String textLines;
	float arrowX, arrowY;
	int numLines;
	int textColor;
	
	String[] textWords;
	
	int maxTextWidth;
	
	int clickableX;
	int clickableY;
	PImage tooltipImage;
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	StaticText(String text)
	{
		super(0, 0, 0 ,0);
		this.text = text;
		numLines = 0;
		
		textColor = color(0, 0, 0);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void setText(String txt)
	{
		textLines = null;
		text = txt;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void layout()
	{
		// // Set text style.
		// if(textFormat == FORMAT_HEADING1)
		// {
			// textFont(fbold);
			// textSize(14);
		// }
		// else if(textFormat == FORMAT_NORMAL)
		// {
			// textFont(font);
			// textSize(12);
		// }
		
		// // Compute bounds
		if(textLines == null)
		{
			textLines = _wrapText(text, (int)w);
		}
		// h = numLines * (textAscent() + textDescent());
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public void drawContent()
	{
		// stroke(0);
		// fill(0);
		// //System.out.println(textLines);
		// textSize(12);
		// textLeading(1);
		// textFont(font);
		stroke(textColor);
		fill(textColor);
		textAlign(LEFT, TOP);
		// text(textLines, 0, 0);
		
		int curX = 0;
		int curY = 0;
		int textHeight = (int)textAscent() + (int)textDescent();
		boolean bullets = false;
		boolean bold = false;
		
		int curLineWidth = 0;
		int lineWidth = (int)w;
		
		maxTextWidth = 0;
		
		for(int i = 0; i < textWords.length; i++)
		{
			if(textWords[i].equals("<l>")) { bullets = true; continue; }
			if(textWords[i].equals("<b>")) { bold = true; continue; }
			if(textWords[i].equals("</b>")) { bold = false; continue; }
			if(textWords[i].equals("<h1>")) { textSize(16); continue; }
			if(textWords[i].equals("<n>")) { textSize(12); continue; }
			if(textWords[i].equals("<*>")) { curLineWidth = 32000; continue; }
			if(textWords[i].equals("<s1>")) 
			{ 
				image(starIcon,curX,curY); 
				curX += 20;
				continue; 
			}
			if(textWords[i].equals("<nanda>")) 
			{ 
				image(firstLevelIcon,curX,curY); 
				clickableX = curX;
				clickableY = curY;
				curX += 20;
				continue; 
			}
			if(textWords[i].equals("<noc>")) 
			{ 
				image(secondLevelIcon,curX,curY); 
				clickableX = curX;
				clickableY = curY;
				curX += 20;
				continue; 
			}
			if(textWords[i].equals("<nic>")) 
			{ 
				image(thirdLevelIcon,curX,curY); 
				clickableX = curX;
				clickableY = curY;
				curX += 20;
				continue; 
			}
			
			if(bold) textFont(fbold);
			else textFont(font);
			
			int wordWidth = (int)textWidth(textWords[i]);
			
			if(curLineWidth + wordWidth >= lineWidth || textWords[i].endsWith("\n"))
			{
				if(curLineWidth > maxTextWidth) maxTextWidth = curLineWidth;
				if(textWords[i].endsWith("\n"))
				{
					text(textWords[i], curX, curY);
					curY += textHeight;
					if(bullets)	
					{
						curX = 20;
						curLineWidth = 20;
					}
					else 
					{
						curX = 0;
						curLineWidth = 0;
					}
				}
				else
				{
					curY += textHeight;
					if(bullets)	
					{
						curX = 40;
						curLineWidth = 40;
					}
					else 
					{
						curX = 0;
						curLineWidth = 0;
					}
					text(textWords[i], curX, curY);
					curX += wordWidth + 5;
					curLineWidth = curX;
				}
				//numLines++;
			}
			else
			{
				text(textWords[i], curX, curY);
				curX += wordWidth + 5;
				curLineWidth = curX;
			}
		}
		if(curLineWidth > maxTextWidth) maxTextWidth = curLineWidth;
		
		h = curY + 10;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public boolean contentMoved(float px, float py)
	{
		if(ptInRect(px, py, clickableX, clickableY, 20, 20) && tooltipImage != null)
		{
			cursor(HAND);
		}
		else
		{
			cursor(ARROW);
		}
		return true;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public boolean contentClicked(float lx, float ly)
	{
		if(ptInRect(lx, ly, clickableX, clickableY, 20, 20))
		{
			if(tooltipImage != null)
			{
				tooltipView = new Tooltip(mouseX + 10, mouseY + 10, 300, 60, tooltipImage);
				tooltipView.arrowX = mouseX;
				tooltipView.arrowY = mouseY;
			}
		}
		return true;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public String _wrapText(String string, int lineWidth)
	{
		textWords = string.split(" ");
		return "don";
		// String[] words = string.split(" ");
		// String output = "";
		// String line = "";
		// boolean bullets = false;
		// boolean bold = true;
		// for(int i = 0; i < words.length; i++)
		// {
			// if(words[i].equals("BULLET")) bullets = true; continue;
			// if(words[i].equals("BOLD")) bold = true; continue;
			// if(words[i].equals("NOBOLD")) bold = false; continue;
			
			// String testLine = line + words[i] + " ";
			// if(textWidth(testLine) >= lineWidth || words[i].endsWith("\n"))
			// {
				// if(words[i].endsWith("\n"))
				// {
					// output += line + words[i];
					// if(bullets) line = "  ";
					// else line = "";
				// }
				// else
				// {
					// output += line + "\n";
					// if(bullets) line = "     " + words[i] + " ";
					// else line = words[i] + " ";
				// }
				// numLines++;
			// }
			// else
			// {
				// line = testLine;
			// }
		// }
		// output += line;
		// numLines++;
		// return output;
	}
}
class TextBox extends View
{
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public String text;
	public boolean  activated = false;
	// public Timer ticktock; // Timer used for blinking cursor
	public boolean timer = true;
	public int lastsec = 0;
	public int cursorPos = 0;
	public String suggestion = "Optional comment";
	
	
	///////////////////////////////////////////////////////////////////////////////////////////////////
	public TextBox(float x_, float y_)
	{
		super(x_, y_, 320, 20);
		text = "";
		interactive = true;
		// tickTock = new Timer();
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public void drawContent()
	{
		fill(255);
		if (activated) stroke(0);
		else stroke(0xffA3A3A3);
		strokeWeight(1.5f);
		rect(0, 0, w, h);

		fill(0);
		textFont(font, 12);
		textAlign(LEFT, CENTER);

		if (text.equals("") && !activated)
		{
		  fill(0xffA3A3A3);
		  text(suggestion, 15, 7);
		}
		else 
		{
			if (timer && activated)
			{
				String pre = text.substring(0,cursorPos);
				pre+="|";
				pre += text.substring(cursorPos);
				text(pre, 15, 7);
			}
			else
			{
				text(text, 15, 7);
			}
		}
		textFont(fbold);
		//textAlign(CENTER,CENTER);
		//System.out.println(second());

		if (second()%1 <= 0.5f && second()!=lastsec) 
		{
			timer = !timer;
			//System.out.println("Toggling "+ timer);
			lastsec = second();
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public void activate()
	{
		if(activeTextBox != null) activeTextBox.deactivate();
		activated = true;
		filterKeyInput = true;
		activeTextBox = this;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public void deactivate()
	{
		activated = false;
		filterKeyInput = false;
		activeTextBox = null;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public boolean keypressed() 
	{
		if (activated) 
		{
			if (key == 8)
			{
				if(cursorPos > 0)
				{
					String pre = text.substring(0,cursorPos);
					if (pre.length() > 0) pre = pre.substring(0, pre.length() - 1);
					pre += text.substring(cursorPos);
					text = pre;
					cursorPos--;
				}
			}
			else
			{
				if (key == CODED) 
				{
					if (keyCode == RIGHT) 
					{
						if(cursorPos < text.length()) cursorPos++;
					}
					if(keyCode == LEFT)
					{
						if(cursorPos > 0) cursorPos--;
					}
				}
				else 
				{
					if (key != 65535) 
					{
						if (cursorPos == text.length()) 
						{
							text += key;
							cursorPos++;
						}
						else
						{
							String s2 = "";
							s2 += text.substring(0, cursorPos);
							s2+=key;
							s2+= text.substring(cursorPos);
							text = s2;
						}
					}
				}
			}
		}
		return activated;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Private stuff.
	PImage icon;
	String label;
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	public boolean contentPressed(float lx, float ly)
	{
		activate();
		System.out.println("Activated = "+ activated);
		return true;
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	// boolean mouseClicked(float px, float py)
	// {
		// //System.out.println(" Px = "+px +" Py = "+py+" x = "+x+" y = "+y+" w = "+w+" h = "+h);
		// if (!ptInRect(px, py, x, y, w, h))
		// { 
			// //System.out.println("FALSEYYYYYYYYYYYYYY");
			// return false;
		// }
		// float lx = px - x;
		// float ly = py - y;
		// // check our subviews first
		// for (int i = subviews.size()-1; i >= 0; i--) 
		// {
			// View v = (View)subviews.get(i);
			// if (v.mouseClicked(lx, ly)) return true;
		// }
		// return contentClicked(lx, ly);
	// }
}

class ThirdLevelRowView extends View 
{
	String title;
	Button iconButton;
	SecondLevelRowView parent;
	int indent;
	StaticText commentBox;
  
	///////////////////////////////////////////////////////////////////////////////////////////////
	ThirdLevelRowView(String title,PImage logo, SecondLevelRowView parent_)
	{
		super(0, 0,width,25);
		this.title = title;

		iconButton = new Button(0, 0, 16, 16, logo);
		subviews.add(iconButton);
		
		parent = parent_;
		indent = 60;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public void layout()
	{
		h = 25;
		if(commentBox != null)
		{
			commentBox.y = h;
			commentBox.x = indent + 80;
			h += 25;
		}
		iconButton.x = indent;
		iconButton.y = 4;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void addComment(String comment)
	{
		commentBox = new StaticText(comment);
		commentBox.w = w;
		subviews.add(commentBox);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void drawContent()
	{
		stroke(0);
		fill(thirdLevelRowColor);
		rect(-1,0,w+10,h);
		fill(0);
		
		if(parent.parent.deleted)
		{
			stroke(STYLE_DELETED_ROW_BACK_COLOR);
			fill(STYLE_DELETED_ROW_BACK_COLOR);
		}		
		
		textSize(12);
		textFont(fbold);
		textAlign(LEFT,CENTER);
		text(title, indent +  35,12);
		
		if(parent.parent.deleted)
		{
			line(0, 15, w, 15);
		}
	}
}
class TitleView extends View {

  PImage logo;
  String title,subtitle;
  int main, titleColor, subtitleColor;
   TitleView(float x_, float y_,float w_, PImage img, String title,String subtitle, int main, int titleColor, int subtitleColor)
  {
    super(x_, y_,w_ , 20);
    this.logo = img;
    this.title = title;
    this.main = main;
    this.titleColor = titleColor;
    this.subtitleColor = subtitleColor;
    this.subtitle = subtitle;
  }

 public void drawContent()
  {
    noStroke();
    fill(main);
    rect(0,0,this.w,27);
    image(logo,0,0);
    textFont(fbold);
    textSize(18);
    fill(titleColor);
    textAlign(LEFT,CENTER);
    text(title, logo.width+5,10);
    textSize(12);
    fill(subtitleColor);
    text(subtitle,logo.width+title.length()*15,11);
  }
}
///////////////////////////////////////////////////////////////////////////////////////////////////
class Tooltip extends View 
{
	String text;
	float arrowX, arrowY;
	String[] rationaleString;
	
	StaticText label;
	PImage ttimage;
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	Tooltip(float x_, float y_, float w_, float h_, String text)
	{
		super(x_, y_,w_ ,h_);
		
		label = new StaticText(text);
		subviews.add(label);
		
		this.text = text;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	Tooltip(float x_, float y_, float w_, float h_, PImage _image)
	{
		super(x_, y_,w_ ,h_);
		
		ttimage = _image;
		
		label = null;
		
		this.text = text;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void layout()
	{
		if(label != null)
		{
			label.w =  w - 10;
			label.x = 5;
			label.y = 5;
			this.h = label.h + 15;
		}
		if(ttimage != null)
		{
			this.w = ttimage.width + 5;
			this.h = ttimage.height + 5;
		}
		
		// If tooltip goes out of screen, fix its position
		if(x + w > SCREEN_WIDTH) x = SCREEN_WIDTH - w - 10;
		if(y + h > SCREEN_HEIGHT) y = SCREEN_HEIGHT - h - 10;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	public void drawContent()
	{
		noStroke();

		int contours = 12;
		for(int i = 0; i < contours; i++)
		{
			int alpha = 50 - (16 / contours) * (i * i);
			fill(0, 0, 0, alpha);
			stroke(0, 0, 0, alpha);
			strokeWeight(1);
			roundrect(-i, -i, (int)w + i * 2, (int)h + i * 2, 5);
			//triangle(0, (contours - i) * 2, arrowX - x, arrowY - y, 0, h - (contours - i) * 2);
		}
		
		fill(tooltipColor);
		stroke(0);
		triangle(0, contours, arrowX - x, arrowY - y, 0, h - contours);
		
		fill(0xffFFFCE5);
		roundrect(0, 0, (int)w, (int)h, 5);
		
		if(ttimage != null)
		{
			image(ttimage, 0, 0);
		}
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////
class View 
{
	float x, y, w, h;
	ArrayList subviews;
	float dragX;
	float dragY;
	boolean visible;
	boolean moving;
	boolean interactive;
	
	float focusx, focusy, focush, focusw;
  
  View(float x_, float y_, float w_, float h_)
  {
	moving = false;
    x = x_;
    y = y_;
    w = w_;
    h = h_;
    subviews = new ArrayList();
	visible = true;
	interactive = false;
  }
  
  public void draw()
  {
	if(visible)
	{
		layout();
		pushMatrix();
		translate(x, y);
		// draw out content, then our subviews on top
		drawContent();
		for (int i = 0; i < subviews.size(); i++) {
		  View v = (View)subviews.get(i);
		  v.draw();
		}
		popMatrix();
	}
  }
  
  public void layout()
  {
  }
  
  public void hide()
  {
  }
  
  public void drawContent()
  {
    // override this
    // when this is called, the coordinate system is local to the view,
    // i.e. 0,0 is the top left corner of this view
  }
  
  public boolean contentPressed(float lx, float ly)
  {
    // override this
    // lx, ly are in the local coordinate system of the view,
    // i.e. 0,0 is the top left corner of this view
    // return false if the click is to "pass through" this view
    return true;
  }
  
  public boolean contentReleased(float lx, float ly)
  {
    // override this
    // lx, ly are in the local coordinate system of the view,
    // i.e. 0,0 is the top left corner of this view
    // return false if the click is to "pass through" this view
    return true;
  }
  
  public boolean contentMoved(float lx, float ly)
  {
    return true;
  }
  
  public boolean contentClicked(float lx, float ly)
  {
    return true;
  }
  
  public boolean contentMouseWheel(float lx, float ly, int delta)
  {
    return false;
  }

  public boolean ptInRect(float px, float py, float rx, float ry, float rw, float rh)
  {
    return px >= rx && px <= rx+rw && py >= ry && py <= ry+rh;
  }

  public boolean mousePressed(float px, float py)
  {
    if (!ptInRect(px, py, x + focusx, y + focusy, w + focusw, h + focush)) return false;
    float lx = px - x;
    float ly = py - y;
    // check our subviews first
    for (int i = subviews.size()-1; i >= 0; i--) {
      View v = (View)subviews.get(i);
      if (v.mousePressed(lx, ly)) return true;
    }
    return contentPressed(lx, ly);
  }

  public boolean mouseMoved(float px, float py)
  {
    if (!ptInRect(px, py, x + focusx, y + focusy, w + focusw, h + focush)) 
	{
		cursor(ARROW);
		return false;
	}
	if(interactive) cursor(HAND);
    float lx = px - x;
    float ly = py - y;
    // check our subviews first
    for (int i = subviews.size()-1; i >= 0; i--) {
      View v = (View)subviews.get(i);
      if (v.mouseMoved(lx, ly)) return true;
    }
    return contentMoved(lx, ly);
  }

  public boolean mouseClicked(float px, float py)
  {
    if (!ptInRect(px, py, x + focusx, y + focusy, w + focusw, h + focush)) return false;
    float lx = px - x;
    float ly = py - y;
    // check our subviews first
    for (int i = subviews.size()-1; i >= 0; i--) {
      View v = (View)subviews.get(i);
      if (v.mouseClicked(lx, ly)) return true;
    }
    return contentClicked(lx, ly);
  }
  
  public boolean mouseReleased(float px, float py)
  {
    if (!ptInRect(px, py, x, y, w, h)) return false;
    float lx = px - x;
    float ly = py - y;
    // check our subviews first
    for (int i = subviews.size()-1; i >= 0; i--) {
      View v = (View)subviews.get(i);
      if (v.mouseReleased(lx, ly)) return true;
    }
    return contentReleased(lx, ly);
  }
  
  public boolean mouseWheel(float px, float py, int delta)
  {
    if (!ptInRect(px, py, x, y, w, h)) return false;
    float lx = px - x;
    float ly = py - y;
    // check our subviews first
    for (int i = subviews.size()-1; i >= 0; i--) {
      View v = (View)subviews.get(i);
      if (v.mouseWheel(lx, ly, delta)) return true;
    }
    return contentMouseWheel(lx, ly, delta);
  }
  
  public boolean keypressed()
  {
    char c = (char) key;  
    for (int i = subviews.size()-1; i >= 0; i--) {
     // System.out.println(i);

      View v = (View)subviews.get(i);
      if (v.keypressed()) return true;
    }
   return false;

  }
  
}

  static public void main(String args[]) {
    PApplet.main(new String[] { "--bgcolor=#F5F5F5", "Prototype_1" });
  }
}
